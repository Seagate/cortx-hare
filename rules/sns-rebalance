#!/usr/bin/env bash
#
# Copyright (c) 2020-2022 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

# Rule script to process SNS rebalance EQ events.
# Expected payload is JSON: "{ cmd: <command_name> }"
# Where command_name can be: start, stop, pause, resume.
# Script uses HTTP API hax endpoint to control SNS rebalance process.
# Expected output: none

set -e -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

log() {
    # logger --stderr --tag "$0" "$*"
    echo -n "$*"
}

cmd=$(jq --raw-output '.cmd' <<<"$HARE_RC_EVENT_PAYLOAD")
fid=$(jq --raw-output '.fid' <<<"$HARE_RC_EVENT_PAYLOAD")

if [[ -z "$cmd" || -z "$fid" ]]; then
    log "Invalid payload $HARE_RC_EVENT_PAYLOAD"
    exit 1
fi

case $cmd in
    start) op_name='rebalance-start' ;;
    stop) op_name='rebalance-stop' ;;
    pause) op_name='rebalance-pause' ;;
    resume) op_name='rebalance-resume' ;;
    *)
    log "handler is called for unknown operation"
    exit 1
    ;;
esac

log "handler is called for $cmd, $fid"

payload=$(jq --null-input --compact-output \
             --arg cmd "$cmd" \
             --arg fid "$fid" \
             '{ cmd: $cmd, fid: $fid }')

get_hax_node_name() {
    curl -s http://localhost:8500/v1/agent/host | jq -r .Host.hostname
}

get_hax_port() {
    consul kv get ports/$(get_hax_node_name)/hax | jq -r .http
}

get_hax_http_protocol() {
    proto=$(consul kv get ssl/hax 2>/dev/null | jq -r .http_protocol)
    [[ "$proto" == "https" ]] && echo "https" || echo "http"
}

hax_node_name=$(get_hax_node_name)
hax_port=$(get_hax_port)
hax_protocol=$(get_hax_http_protocol)

status_code=$(curl -k \
    ${hax_protocol}://${hax_node_name}:${hax_port}/api/v1/sns/${op_name} \
                   --silent \
                   --output /dev/null \
                   --request POST \
                   --write-out '%{http_code}\n' \
                   --data "$payload")
rc=$?
[[ status_code -eq 200 && rc -eq 0 ]] \
    || log "rule failed. http: $status_code, rc: $rc"
