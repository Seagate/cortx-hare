#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

set -eu -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

PROG=${0##*/}

die() {
    echo "$PROG: $*" >&2
    exit 1
}

usage() {
    cat <<EOF
Usage: . $PROG [-n | --dry-run]
         $PROG [<option>]... --conf-dir <dir>
         $PROG [<option>]... --kv-file <dir>
         $PROG [<option>]... --uuid <str>

Positional arguments:
  --conf-dir <dir>  Configuration directory path to read configuration
                    from or write to.
  --log-dir <dir>   Log directory path
  --kv-file <kv>    Hare-Motr configuration key values file path.
  --uuid <str>      UUID to be used to write in sysconfig file

Create Consul agent configuration file.

  -n, --dry-run   Do not create configuration file, only export variables
                  and function definitions.
  -s, --server    Configure Consul server, by default configure Consul client.
  -x, --xprt      Generate motr endpoint with respect to the given motr
                  transport type. Support transport types are lnet and libfab.
EOF
}

TEMP=$(getopt --options hnsx: \
              --longoptions help,dry-run,conf-dir:,kv-file:,uuid:,xprt:\
              --longoptions log-dir: \
              --longoptions server \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

conf_dir=
log_dir=/var/log/seagate/hare
kv_file=/var/lib/hare/consul-kv.json
dry_run=false
server=false
xprt='lnet'
# custom_config flag will tell if custom config dir is provided or not
# In case of mini-provisioning, conf_dir will be provided(derived from confstore)
# In case conf_dir is not provided then below flat will be false and we will use
# default config_dir path
# We are using below flag to decide on where sysconfig files will be created
custom_config=true
uuid=

while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        -c|--conf-dir)       conf_dir=$2; shift 2 ;;
        -l|--log-dir)        log_dir=$2; shift 2 ;;
        -k|--kv-file)        kv_file=$2; shift 2 ;;
        -s|--server)         server=true; shift ;;
        -x|--xprt)           xprt=$2; shift 2 ;;
        --uuid)              uuid=$2; shift 2 ;;
        --dry-run)           dry_run=true; shift ;;
        --)                  shift; break ;;
        *)                   break ;;
    esac
done

if [[ -z $conf_dir ]]; then
    conf_dir=/var/lib/hare
    custom_config=false
fi

if [[ -z $uuid ]]; then
    UUID=$(uuidgen --time)
else
    UUID=$uuid
fi

[[ -d $conf_dir ]] || die "'--conf-dir' argument is not a directory"

if $custom_config; then
    sysconfig_dir='sysconfig'
else
    sysconfig_dir='/etc/sysconfig'
fi

get_node_name() {
    /opt/seagate/cortx/hare/libexec/node-name --conf-dir=$conf_dir
}

get_service_ids() {
    local filter=$1
    local cmd="consul kv get -recurse m0conf/nodes/$(get_node_name)/processes/ |
                  $filter | sed 's/.*processes.//' | cut -d/ -f1"
    eval $cmd || true
}

get_service_ep() {
    local process_fidk=$1
    consul kv get m0conf/nodes/$(get_node_name)/processes/$process_fidk/endpoint
}

get_ios_meta_data_from_kv_file() {
    local process_fidk=$1
    local key="m0conf/nodes/$(get_node_name)/processes/$process_fidk/meta_data"

    local cmd="jq -r '.[] | select(.key==\"$key\") |
                  .value' $kv_file | head -n 1"

    eval $cmd || true
}

get_service_ids_from_kv_file() {
    local filter=$1
    local key="m0conf/nodes/$(get_node_name)/processes/*"
    # echo "key: $key fiter: $filter"
    local cmd="jq -r '.[] | select(.key|test(\"$key\"))' $kv_file |
                  $filter | sed 's/.*processes.//' | cut -d/ -f1"
    eval $cmd || true
}

get_service_ep_from_kv_file() {
    local process_fidk=$1
    local key="m0conf/nodes/$(get_node_name)/processes/$process_fidk/endpoint"
    # echo "key: $key"
    local cmd="jq -r '.[] | select(.key==\"$key\") |
                  .value' $kv_file | head -n 1"
    eval $cmd || true
}

get_profile_from_kv_file() {
    local cmd="jq -r '.[].key | select(test(\"m0conf/profiles/*\"))' $kv_file |
                   head -1 | cut -d/ -f3"
    eval $cmd || true
}

get_service_addr() {
    if [[ $xprt == 'lnet' ]]; then
        echo ${1%:*}
    elif [[ $xprt == 'libfab' ]]; then
        echo ${1%@*}
    else
        die "Invalid transport $xprt"
    fi
}

get_service_ip_addr() {
    echo ${1%@*}
}

get_service_port() {
    if [[ $xprt == 'lnet' ]]; then
        echo ${1##*:}
    elif [[ $xprt == 'libfab' ]]; then
        echo ${1##*@}
    else
        die "Invalid transport $xprt"
    fi
}

get_service_host() {
    echo ${1##*:}
}

install_motr_conf() {
    local motr_conf_file=$1
    if $custom_config; then
        sudo install $motr_conf_file $conf_dir/$sysconfig_dir/motr/$(get_node_name)/
    else
        sudo install $motr_conf_file $sysconfig_dir/
    fi
}

install_s3_conf() {
    local s3_conf_file=$1
    if $custom_config; then
        sudo install $s3_conf_file $conf_dir/$sysconfig_dir/s3/$(get_node_name)/
    else
        sudo install $s3_conf_file $sysconfig_dir/
    fi
}

create_motr_conf_dir() {
    mkdir -p $conf_dir/$sysconfig_dir/motr/$(get_node_name)
}

create_s3_conf_dir() {
    mkdir -p $conf_dir/$sysconfig_dir/s3/$(get_node_name)
}

if $custom_config ; then
    create_motr_conf_dir
    create_s3_conf_dir
fi

if $custom_config ; then
    [ -d $conf_dir/$sysconfig_dir ] || sysconfig_dir='/etc/default'
else
    [ -d $sysconfig_dir ] || sysconfig_dir='/etc/default'
fi

id2fid() {
    printf '0x7200000000000001:%#x\n' $1
}

HAX_ID=$(get_service_ids_from_kv_file 'grep -iw "services\/ha"')
[[ $HAX_ID ]] || {
    cat >&2 <<.
Cannot get information about Hax from Consul for this host ($(get_node_name)).
Please verify that the host name matches the one stored in the Consul KV.
.
    usage >&2
    exit 1
}
CONFD_IDs=$(get_service_ids_from_kv_file 'grep -iw "services\/confd"')
IOS_IDs=$(get_service_ids_from_kv_file 'grep -iw "services\/ios"')
S3_IDs=$(get_service_ids_from_kv_file 'grep -iw "services\/m0_client_s3"')
HAX_EP=$(get_service_ep_from_kv_file $HAX_ID)

if $dry_run; then
    return 0  # we must not `exit`, because the script is sourced
fi
# --------------------------------------------------------------------

mkdir -p $conf_dir/consul-server-conf/
mkdir -p $conf_dir/consul-client-conf/

if $server; then
    CONF_FILE=$conf_dir/consul-server-conf/consul-server-conf.json
else
    CONF_FILE=$conf_dir/consul-client-conf/consul-client-conf.json
fi

pwdesc=$(echo $conf_dir | sed 's_/_\\/_g')
sed -i "s/TMP_CONF_DIR/$pwdesc/" $CONF_FILE
sed -i "s|TMP_LOG_DIR|$log_dir|" $CONF_FILE

SVCS_CONF=''

append_hax_svc() {
    local id=$1
    local ep=$(get_service_ep_from_kv_file $id)
    local addr=$(get_service_addr $ep)
    local port=$(get_service_port $ep)
    local host=$(get_service_host $addr)
    SVCS_CONF+="${SVCS_CONF:+,}{
      \"id\": \"$id\",
      \"name\": \"hax\",
      \"address\": \"$addr\",
      \"port\": $port,
      \"checks\": [
          {
            \"args\": [ \"/opt/seagate/cortx/hare/libexec/check-service\",
                        \"--hax\", \"--port\", \"$port\",
                        \"--host\", \"$host\",
                        \"--conf-dir\", \"$conf_dir\" ],
            \"interval\": \"1s\",
            \"status\": \"warning\"
          }
        ]
    }"
}

append_confd_svc() {
    local id=$1
    local fid=$(id2fid $id)
    local ep=$(get_service_ep_from_kv_file $id)
    local addr=$(get_service_addr $ep)
    local host=$(get_service_host $addr)
    local port=$(get_service_port $ep)
    SVCS_CONF+="${SVCS_CONF:+,}{
      \"id\": \"$id\",
      \"name\": \"confd\",
      \"address\": \"$addr\",
      \"port\": $port,
      \"checks\": [
          {
            \"args\": [ \"/opt/seagate/cortx/hare/libexec/check-service\",
                        \"--fid\", \"$fid\", \"--port\", \"$port\",
                        \"--host\", \"$host\",
                        \"--conf-dir\", \"$conf_dir\" ],
            \"interval\": \"1s\",
            \"status\": \"warning\"
          }
        ]
    }"
    cat <<EOF | sudo tee /tmp/m0d-$fid > /dev/null
MOTR_M0D_EP='$ep'
MOTR_HA_EP='$HAX_EP'
MOTR_PROCESS_FID='$fid'
MOTR_CONF_XC='/etc/motr/confd.xc'
MOTR_NODE_UUID='$UUID'
EOF
    install_motr_conf /tmp/m0d-$fid
}

append_ios_svc() {
    local id=$1
    local fid=$(id2fid $id)
    local ep=$(get_service_ep_from_kv_file $id)
    local addr=$(get_service_addr $ep)
    local port=$(get_service_port $ep)
    local host=$(get_service_host $addr)
    local meta_data=$(get_ios_meta_data_from_kv_file $id)
    SVCS_CONF+="${SVCS_CONF:+,}{
      \"id\": \"$id\",
      \"name\": \"ios\",
      \"address\": \"$addr\",
      \"port\": $port,
      \"checks\": [
          {
            \"args\": [ \"/opt/seagate/cortx/hare/libexec/check-service\",
                        \"--fid\", \"$fid\", \"--port\", \"$port\",
                        \"--host\", \"$host\",
                        \"--conf-dir\", \"$conf_dir\" ],
            \"interval\": \"1s\",
            \"status\": \"warning\"
          }
        ]
    }"
    cat <<EOF | sudo tee /tmp/m0d-$fid > /dev/null
MOTR_M0D_EP='$ep'
MOTR_HA_EP='$HAX_EP'
MOTR_PROCESS_FID='$fid'
EOF
    if [[ $meta_data ]]; then
        cat <<EOF | sudo tee -a /tmp/m0d-$fid > /dev/null
MOTR_BE_SEG_PATH='$meta_data'
EOF
    fi
    cat <<EOF | sudo tee -a /tmp/m0d-$fid > /dev/null
MOTR_NODE_UUID='$UUID'
EOF
    install_motr_conf /tmp/m0d-$fid
}

append_s3_svc() {
    local id=$1
    local fid=$(id2fid $id)
    local ep=$(get_service_ep_from_kv_file $id)
    local addr=$(get_service_addr $ep)
    local port=$(get_service_port $ep)
    local host=$(get_service_host $addr)
    local s3port=$2
    local s3svc='s3server'@$fid
    SVCS_CONF+="${SVCS_CONF:+,}{
      \"id\": \"$id\",
      \"name\": \"s3service\",
      \"address\": \"$addr\",
      \"port\": $port,
      \"checks\": [
          {
            \"args\": [ \"/opt/seagate/cortx/hare/libexec/check-service\",
                        \"--svc\", \"$s3svc\", \"--port\", \"$port\",
                        \"--host\", \"$host\",
                        \"--conf-dir\", \"$conf_dir\" ],
            \"interval\": \"1s\",
            \"status\": \"warning\"
          }
        ]
    }"
    local first_profile_fid=$(get_profile_from_kv_file)
    [[ -n $first_profile_fid ]]  # assert
    cat <<EOF | sudo tee /tmp/s3server-$fid > /dev/null
MOTR_PROFILE_FID=$first_profile_fid
MOTR_S3SERVER_EP='$ep'
MOTR_HA_EP='$HAX_EP'
MOTR_PROCESS_FID='$fid'
MOTR_S3SERVER_PORT=$s3port
EOF
    install_s3_conf /tmp/s3server-$fid
}

for id in $HAX_ID; do
    append_hax_svc $id
done

for id in $CONFD_IDs; do
    append_confd_svc $id
done

for id in $IOS_IDs; do
    append_ios_svc $id
done

s3port=28071
for id in $S3_IDs; do
    append_s3_svc $id $s3port
    ((s3port++))
done

tmpfile=$(mktemp /tmp/${CONF_FILE##*/}.XXXXXX)
trap "rm -f $tmpfile" EXIT # delete automatically on exit
jq ".services = [$SVCS_CONF]" <$CONF_FILE >$tmpfile
sudo cp $tmpfile $CONF_FILE
# Copy consul-server-conf for this node to consul dir.
mkdir -p /etc/consul.d/
sudo cp $CONF_FILE /etc/consul.d/

sudo sed -r "s;(http://)localhost;\1$(get_node_name);" \
         -i $CONF_FILE

consul reload > /dev/null
