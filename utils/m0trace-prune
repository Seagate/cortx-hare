#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

set -eu -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

PROG=${0##*/}

usage() {
cat <<EOF
Usage: $PROG [<option>]

Prune Hax m0trace files.

Options:
    -n <nr files> Max number of m0trace files to retain.
    -h, --help    Display help and exit.
EOF
}

TEMP=$(getopt --options hn: \
              --longoptions help \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

declare -A default_nr_files_to_prune=(
    [virtual]=2
    [physical]=5
)

max_files_to_retain=
while true; do
    case "$1" in
        -h|--help)   usage; exit ;;
        -n)          max_files_to_retain=$2; shift 2 ;;
        --)          shift; break ;;
        *)           break ;;
    esac
done

hax_m0_dir=/var/motr/hax
get_max_files_by_platform() {
    if [[ $(systemd-detect-virt) = none ]]; then
        echo ${default_nr_files_to_prune[physical]}
    else
        echo ${default_nr_files_to_prune[virtual]}
    fi
}

max_files_to_retain=${max_files_to_retain:-$(get_max_files_by_platform)}

total_m0trace_files=$(find $hax_m0_dir -maxdepth 1 -type f -name "m0trace.*" | wc -l)
echo "$total_m0trace_files present, $max_files_to_retain to be retained"
if (( $total_m0trace_files > $max_files_to_retain )); then
    nr_files_to_prune=$(( $total_m0trace_files - $max_files_to_retain ))
    echo "Pruning $nr_files_to_prune from $total_m0trace_files"
    files_to_prune=`ls -tr $hax_m0_dir | grep m0trace | head -n -$max_files_to_retain`
    for file in $files_to_prune; do
        echo "Removing $hax_m0_dir/$file"
        rm -f $hax_m0_dir/$file
    done
fi
