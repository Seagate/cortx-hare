#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

# :help: Fetch the fids for motr services (m0d and other clients)

import argparse
import json
import re
import sys
from typing import List, NamedTuple, Optional
import logging
import simplejson
from hax.types import ObjT

from utils import get_node_name

Process = NamedTuple('Process', [('name', str), ('fid', str)])


class Node:
    def __init__(self, name: str):
        self.name = name
        self.svcs: List[Process] = []

    def add_service(self, svc: str, fid: str) -> None:
        self.svcs.append(Process(svc, fid))

    def get_service(self, service: str) -> Optional[List[Process]]:
        # Returns list of services matching the given service
        services: List[Process] = []
        for svc in self.svcs:
            if svc.name == service:
                services.append(svc)
        if services:
            return services

        logging.error('No services found')
        return None

    def __repr__(self):
        return f'{self.__class__.__name__}(name={self.name}, svcs={self.svcs})'

    def for_json(self):
        return self.__dict__


def to_fid(container: int, key: int) -> str:
    return f'{container:#x}:{key:#x}'


def node_names(data: List) -> List[str]:
    # Get entries from file
    # "key": "m0conf/nodes/<node_fid>",
    # "value": "{\"name\": \"<node name>\", \"state\": \"<HA state>\"}"
    regex = r'm0conf/nodes/[a-zA-Z0-9:]+$'
    nodes: List[str] = []
    for key in data:
        match_result = re.match(regex, key['key'])
        if not match_result:
            continue
        if len(key['key'].split('/')) == 3:
            nodes.append(json.loads(key['value'])['name'])
    return nodes


def get_keys_for_processes(data: List, client_types: List) -> List[str]:
    # Get 'm0conf/nodes/<node_id>/processes/<process_fidk>/services/<svc_type>'
    # entries from the file.  See 'Consul KV Schema' in [4/KV](rfc/4/README.md)

    service_names = 'confd|ios'

    for client_type in client_types:
        service_names += '|' + client_type

    regex = re.compile('^m0conf\\/.*\\/processes\\/.*\\/services\\'
                       '/(' + service_names + ')+$')
    keys = []
    for key in data:
        match_result = re.match(regex, key['key'])
        if not match_result:
            continue
        keys.append(match_result.group(0))
    if not keys:
        logging.error('No services found')
    return keys


def add_service_to_node(nodes: List[Node], node_name: str, svc_name: str,
                        fid: str) -> None:
    for node in nodes:
        if node.name == node_name:
            node.add_service(svc_name, fid)


def get_service_for_node(nodes: List[Node], node_name: str,
                         service: str, path: str) -> Optional[List[Process]]:
    # if node_name is not specified, then local node is used.
    if not node_name:
        node_name = get_node_name(path)

    # if service is not specified, return all the services for a node.
    if not service:
        for node in nodes:
            if node.name == node_name:
                return node.svcs

    # returns all the services for the specified given service
    for node in nodes:
        if node.name == node_name:
            return node.get_service(service)

    return None


def process_all_keys(keys: List,
                     nodes: List[Node],
                     client_types: List) -> None:
    names = {'confd': 'confd', 'ios': 'ioservice'}

    for client_type in client_types:
        names[client_type] = client_type

    for key in keys:
        # key looks like
        # 'm0conf/nodes/<name>/processes/<process_fidk>/services/<svc_type>'
        parts = key.split('/')
        svc_type = parts[-1]
        node_name = parts[2]
        process_fidk = parts[-3]
        add_service_to_node(nodes, node_name, names[svc_type],
                            to_fid(ObjT.PROCESS.value, int(process_fidk)))
    for node in nodes:
        if not node.svcs:
            logging.error(
                'No ioservice, confd, or any motr client found on the '
                f'node {node.name}')


def read_file(path: str):
    filename = f'{path}/consul-kv.json'
    with open(filename) as consul_kv_file:
        data = json.load(consul_kv_file)
    return data


def get_nodes_for_cluster(path: str) -> List[Node]:
    file_data = read_file(path)
    nodes: List[Node] = []
    for n in node_names(file_data):
        nodes.append(Node(n))

    client_types = []
    for key in file_data:
        if key['key'] == 'm0_client_types':
            client_types = json.loads(key['value'])
            break

    keys = get_keys_for_processes(file_data, client_types)
    process_all_keys(keys, nodes, client_types)
    return nodes


def parse_opts(argv):
    p = argparse.ArgumentParser(
        description='Fetches the fids for motr services (m0d and clients) '
        'in cluster or node.',
        usage='%(prog)s [OPTION]')

    p.add_argument('--service',
                   '-s',
                   help='service name. - Returns fid for given service. '
                   'List of services- "confd", "ioservice", other '
                   'client type. '
                   'Default: Returns the fids for all the services.',
                   type=str,
                   action='store')
    p.add_argument('--index',
                   '-i',
                   help='service index. - Returns fid for given service'
                   ' at given index.'
                   ' Default: Returns the fids for all the services.'
                   ' "--service" option is required for this option.'
                   ' Also note that while returning result simplistic indexing'
                   ' method is used where the index value is used as a'
                   ' subscript into the list of identifiers for a given'
                   ' service type. Hare does not guarantee that a mapping'
                   ' between a given index and service identifier will always'
                   ' be preserved',
                   type=int,
                   default=-1,
                   action='store')
    p.add_argument(
        '--node',
        '-n',
        help='node-name - Returns the fids of services for the given node. '
        'Default: Local node',
        type=str,
        action='store')
    p.add_argument(
        '--conf-dir',
        '-c',
        help='Path to hare config directory. '
        'Default: /var/lib/hare',
        type=str,
        default='/var/lib/hare',
        action='store')
    p.add_argument(
        '--all',
        help='Returns fids of all the services for nodes in cluster.',
        action='store_true')
    p.add_argument('--json',
                   help='show output in JSON format',
                   action='store_true')

    return p.parse_args(argv)


def main(argv=None):
    opts = parse_opts(argv)
    try:
        nodes = get_nodes_for_cluster(opts.conf_dir)

        if opts.all:
            print(simplejson.dumps(nodes, indent=2, for_json=True))
            return 0

        svcs = get_service_for_node(nodes, opts.node, opts.service,
                                    opts.conf_dir)
        if svcs:
            if opts.index >= 0:
                if opts.index >= len(svcs):
                    raise RuntimeError(f'There are only "{len(svcs)}"'
                                       'instances of the provided service')
                print(simplejson.dumps(svcs[opts.index],
                                       indent=2, for_json=True))
            else:
                print(simplejson.dumps(svcs, indent=2, for_json=True))

    except (RuntimeError, FileNotFoundError) as e:
        print(e, file=sys.stderr)

    return 0


if __name__ == '__main__':
    sys.exit(main())
