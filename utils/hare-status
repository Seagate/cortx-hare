#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.


# :help: show cluster status

import argparse
import io
import logging
import sys
from subprocess import PIPE, Popen
from typing import Any, Dict, List, NamedTuple, Optional, Set

import simplejson as j
from consul import Consul, ConsulException
from hax.exception import HAConsistencyException
from hax.util import repeat_if_fails
from requests.exceptions import RequestException
from urllib3.exceptions import HTTPError


class Fid:
    def __init__(self, container: int, key: int):
        self.container = container
        self.key = key

    def __str__(self):
        return f'{self.container:#x}:{self.key:#x}'

    def __repr__(self):
        return f'{self.__class__.__name__}({self.container:#x}, {self.key:#x})'


class FidEncoder(j.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Fid):
            return str(obj)
        return super().default(obj)


Process = NamedTuple('Process', [('name', str), ('fid', Fid), ('ep', str),
                                 ('status', str)])

Host = NamedTuple('Host', [('name', str), ('svcs', List[Process])])


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def get_kv(cns: Consul, key: str, recurse: bool = False) -> Any:
    """
    Returns the given value from Consul KV. May throw HAConsistencyException in
    case of an intermittent connection error or while Consul is re-electing
    internal Raft leader.
    """
    try:
        kv: Dict[str, Any] = cns.kv.get(key, recurse=recurse)[1]
        if kv is None:
            return None
        if isinstance(kv, list):
            return kv
        val = kv['Value']
        return val.decode() if val else None
    except (ConsulException, HTTPError, RequestException) as e:
        raise HAConsistencyException('Could not access Consul KV') from e


def get_kv_safe(cns: Consul, key: str, **kwargs) -> str:
    return get_kv(cns, key, **kwargs) or ''


def leader_tag(cns: Consul, host: str) -> str:
    return ' (RC)' if get_kv_safe(cns, 'leader') == host else ''


def profile(cns: Consul) -> str:
    return get_kv_safe(cns, 'm0conf/profiles')


def sns_pools(cns: Consul) -> List[str]:
    return get_kv_safe(cns, 'm0conf/profiles/pools').split(' ')


def hosts(cns: Consul) -> Set[str]:
    data = get_kv(cns, 'm0conf/nodes', recurse=True)
    host_names = {(x['Key'].split('/'))[2] for x in data}
    return host_names


def get_fs_stats(cns: Consul) -> Optional[Any]:
    data = get_kv(cns, 'stats/filesystem')
    return j.loads(data)


def proc_id2name(cns: Consul, node: str, proc_id: int) -> str:
    names = {
        'confd': 'confd',
        'ha': 'hax',
        'ios': 'ioservice',
        'm0_client_s3': 's3server'
    }
    services = get_kv(cns,
                      f'm0conf/nodes/{node}/processes/{proc_id}/services',
                      recurse=True)
    assert services
    for svc in services:
        # key looks like
        # 'm0conf/nodes/{node}/processes/{proc_id}/services/<svc_name>'
        svc_name = svc['Key'].split('/')[-1]
        if svc_name in names:
            return names[svc_name]
    return 'm0_client'


def processes(cns: Consul, node_id: str) -> List[Process]:
    # Get 'm0conf/nodes/<node_id>/processes/<process_fidk>/...' entries
    # from the KV.  See 'Consul KV Schema' in [4/KV](rfc/4/README.md).
    data = get_kv(cns, f'm0conf/nodes/{node_id}/processes', recurse=True)
    fidk_list: List[int] = list({int(x['Key'].split('/')[4]) for x in data})
    fidk_list.sort()
    return [
        Process(name=proc_id2name(cns, node_id, k),
                fid=Fid(0x7200000000000001, k),
                ep=get_kv_safe(
                    cns, f'm0conf/nodes/{node_id}/processes/{k}/endpoint'),
                status=process_status(cns, node_id, k)) for k in fidk_list
    ]


def process_status(cns: Consul, node_id: str, fidk: int) -> str:
    for check in cns.health.node(node_id)[1]:
        if check['ServiceID'] and fidk == int(check['ServiceID']):
            return 'started' if check['Status'] == 'passing' else 'offline'
    return 'unknown'


def cluster_online() -> bool:
    cmd = ['pgrep', '--full', '/opt/seagate/cortx/hare/bin/hax']
    process = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='utf8')
    out, err = process.communicate()
    exit_code = process.returncode
    return exit_code == 0


@repeat_if_fails(max_retries=24)
def get_cluster_status(cns: Consul) -> Dict[str, Any]:
    nodes = [(Host(name=h, svcs=processes(cns, h)))._asdict()
             for h in hosts(cns)]
    return {
        'profile': profile(cns),
        'pools': [x for x in sns_pools(cns)],
        'filesystem': get_fs_stats(cns),
        'nodes': nodes
    }


def parse_opts(argv):
    p = argparse.ArgumentParser(description='Show cluster status.',
                                usage='%(prog)s [OPTION]')
    p.add_argument('--json',
                   help='show output in JSON format',
                   action='store_true')
    return p.parse_args(argv)


def setup_logging():
    logging.basicConfig(level=logging.ERROR)


@repeat_if_fails(max_retries=24)
def show_text_status(cns: Consul):
    # In-memory buffer required because an intermittent Consul exception can
    # happen right in the middle of printing something. It is good to postpone
    # the printing to stdout until the moment when those exceptions can't
    # appear anymore.
    with io.StringIO() as stream:
        # Raised exception will cross  the 'with' border so that the stream
        # will be closed and its memory will be released.
        #
        def echo(text):
            print(text, file=stream)

        def flush():
            print(stream.getvalue())

        echo('Profile: ' + profile(cns))
        echo('Data pools:')
        for x in sns_pools(cns):
            echo(f'    {x}')
        echo('Services:')
        for h in hosts(cns):
            echo(f'    {h} {leader_tag(cns, h)}')
            for p in processes(cns, h):
                fid: str = f'{p.fid}'
                echo(f'    [{p.status}]  {p.name:<9}  {fid:<23}  {p.ep}')
        flush()


def main(argv=None):
    setup_logging()
    opts = parse_opts(argv)
    cns = Consul()
    if not cluster_online():
        print('Cluster is not running.', file=sys.stderr)
        return 1

    if opts.json:
        status = get_cluster_status(cns)
        print(j.dumps(status, indent=2, cls=FidEncoder))
        return 0
    show_text_status(cns)


if __name__ == '__main__':
    try:
        sys.exit(main())
    except HAConsistencyException as err:
        sys.exit(f'Consul Error: {err}')
