#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

# :help: show cluster status

import json
import argparse
import inject
import io
import logging
import re
import simplejson
import sys
from subprocess import PIPE, Popen
from typing import Any, Dict, List, NamedTuple, Optional

from consul import Consul, ConsulException
from hax.common import di_configuration
from hax.exception import HAConsistencyException
from hax.util import ConsulUtil, repeat_if_fails
from hax.types import Fid
from requests.exceptions import RequestException
from urllib3.exceptions import HTTPError

Bytecount = NamedTuple('Bytecount', [('type', str), ('num_bytes', str)])

Profile = NamedTuple('Profile', [
    ('fid', str), ('name', str), ('pools', List[str])])

Pool = NamedTuple('Pool', [('fid', str), ('name', str)])

Process = NamedTuple('Process', [('name', str), ('fid', Fid), ('ep', str),
                                 ('status', str)])

Device = NamedTuple('Device', [('name', str), ('status', str)])

Node = NamedTuple('Node', [('name', str), ('svcs', List[Process])])

Devices = NamedTuple('Devices', [('node_name', str), ('devs', List[Device])])


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def kv_item(cns: Consul, key: str, recurse: bool = False) -> Any:
    """Gets Consul KV item.

    May throw HAConsistencyException in case of an intermittent connection
    error or while Consul is re-electing internal Raft leader.

    The _value_ returned is for the specified key, or if `recurse` is True
    a list of _values_ for all keys with the given prefix is returned.

    Each _value_ looks like this:
    ```
    {
      "CreateIndex": 100,
      "ModifyIndex": 200,
      "LockIndex": 200,
      "Key": "foo",
      "Flags": 0,
      "Value": "bar",
      "Session": "adf4238a-882b-9ddc-4a9d-5b6758e4159e"
    }
    ```
    Returns None if the requested `key` does not exists.
    """
    try:
        # See https://python-consul.readthedocs.io/en/latest/#consul-kv
        val = cns.kv.get(key, recurse=recurse)[1]
        assert val is None or recurse == (type(val) is list)
        return val
    except (ConsulException, HTTPError, RequestException) as e:
        raise HAConsistencyException('Could not access Consul KV') from e


def kv_value_as_str(cns: Consul, key: str) -> Optional[str]:
    item = kv_item(cns, key)
    return None if item is None else item['Value'].decode()


def leader_tag(cns: Consul, host: str) -> str:
    return ' (RC)' if kv_value_as_str(cns, 'leader') == host else ''


def bytecount(cns: Consul) -> List[Bytecount]:
    """The bytecount() will return for the specified key ('bytecount/'),
    or if `recurse` is True then a list of "_value_" for all keys with the
    given prefix is returned.

    Each _value_ looks like this:
    ```
    {
      "bytecount": {
        "critical": 0,
        "damaged": 0,
        "degraded": 0,
        "healthy": 0
      }
    }
    ```
    """
    bytecount = []
    for x in kv_item(cns, 'bytecount/', recurse=True):
        bytecount.append(Bytecount(
            type=x['Key'].split('/')[-1],
            num_bytes=json.loads(x['Value'])))
    return bytecount


def profiles(cns: Consul) -> List[Profile]:
    profs = []
    for x in kv_item(cns, 'm0conf/profiles/', recurse=True):
        fidstr = x['Key'].split('/')[-1]
        payload = json.loads(x['Value'])
        profs.append(Profile(
            fid=fidstr, name=payload['name'], pools=payload['pools']))
    return profs


def sns_pools(cns: Consul) -> List[Pool]:
    return [Pool(fid=x['Key'].split('/')[-1], name=x['Value'].decode())
            for x in kv_item(cns, 'm0conf/pools/', recurse=True)]


def node_names(cns: Consul) -> List[str]:
    data = kv_item(cns, 'm0conf/nodes/', recurse=True)
    return [json.loads(x['Value'])['name'] for x in data
            if len(x['Key'].split('/')) == 3]  # XXX Yuck!


def get_fs_stats(cns: Consul) -> Any:
    stats = kv_value_as_str(cns, 'stats/filesystem')
    return {'stats': {}} if stats is None else json.loads(stats)


def fid_key(fid: str) -> int:
    key = fid.split(':')[1]
    return int(key, 16)


def node_name2fid(cns: Consul, node_name: str) -> Any:
    for x in kv_item(cns, 'm0conf/nodes/', recurse=True):
        parts = x['Key'].split('/', 3)
        if len(parts) == 3 and json.loads(x['Value'])['name'] == node_name:
            return parts[-1]
    raise RuntimeError(f'Cannot find Consul KV entry for node {node_name!r}')


def processes(cns: Consul, consul_util: ConsulUtil,
              node_name: str) -> List[Process]:
    # Get 'm0conf/nodes/<node_id>/processes/<process_fidk>/...' entries
    # from the KV.  See 'Consul KV Schema' in [4/KV](rfc/4/README.md).
    node_fid = node_name2fid(cns, node_name)
    proc_fidks = []
    for x in kv_item(cns, f'm0conf/nodes/{node_fid}/processes/', recurse=True):
        parts = x['Key'].split('/', 5)
        if len(parts) == 5:
            proc_fidks.append(fid_key(parts[-1]))
    node_health = consul_util.get_node_health_status(node_name)
    process_states = get_node_process_states(cns, node_name)
    process_list = get_node_processes(cns, node_name)

    names = {
        'confd': 'confd',
        'ha': 'hax',
        'ios': 'ioservice',
        'm0_client_s3': 's3server'
    }
    m0_client_types = kv_item(cns, 'm0_client_types')
    for client_type in json.loads(m0_client_types['Value']):
        names[client_type] = client_type

    return [
        Process(
            name=proc_id2name(names, process_list, k),
            fid=Fid(0x7200000000000001, k),
            ep=(proc_id2endpoint(process_list, k) or '**ERROR**'),
            status=process_status(node_health, process_states,
                                  Fid(0x7200000000000001, k)))
        for k in sorted(proc_fidks)
    ]


def process_status(node_health: str, proc_states: Dict[str, str],
                   fid: Fid) -> str:
    if node_health != 'passing' or proc_states is None:
        return 'offline'
    if str(fid) in proc_states:
        return proc_states[str(fid)]
    else:
        return 'unknown'


def get_node_process_states(cns: Consul, node_name: str) -> Dict[str, str]:
    key = 'processes/'
    proc_list = kv_item(cns, key, recurse=True)
    process_states: Dict[str, str] = {}

    if proc_list is None:
        return process_states

    for proc in proc_list:
        key_split = proc['Key'].split('/')
        if len(key_split) != 2:
            continue
        fid = key_split[-1]
        val = json.loads(proc['Value'])
        if val['state'] in ('M0_CONF_HA_PROCESS_STARTED',
                            'M0_CONF_HA_PROCESS_DTM_RECOVERED'):
            state = 'started'
        elif val['state'] in ('Unknown', 'UNKNOWN'):
            state = 'unknown'
        else:
            state = 'offline'
        process_states[fid] = state
    return process_states


def proc_id2endpoint(process_list: List[Dict[str, Any]],
                     proc_id: int) -> Optional[str]:
    regex = re.compile(
        f'^m0conf\\/.*\\/processes\\/{proc_id}\\/endpoint$')
    for proc_item in process_list:
        match_result = re.match(regex, proc_item['Key'])
        if not match_result:
            continue
        process_ep: bytes = proc_item['Value']
        return process_ep.decode('utf-8')
    return None


def proc_id2name(names: Dict[str, str],
                 processes: List[Dict[str, Any]],
                 proc_id: int) -> str:
    regex = re.compile(
        f'^m0conf\\/.*\\/processes\\/{proc_id}\\/services\\/(.+)$')
    process_found = False
    for proc in processes:
        match_result = re.match(regex, proc['Key'])
        if not match_result:
            continue
        process_found = True
        svc_type = match_result.group(1)
        if svc_type in names:
            return names[svc_type]
    assert process_found
    return 'm0_client'


def get_node_processes(cns: Consul, node_name: str) -> Any:
    processes = kv_item(cns,
                        f'm0conf/nodes/{node_name}/processes/',
                        recurse=True)
    assert processes
    return processes


def cluster_online() -> bool:
    cmd = ['pgrep', '--full', '/opt/seagate/cortx/hare/bin/hax']
    process = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='utf8')
    out, err = process.communicate()
    exit_code = process.returncode
    return exit_code == 0


def devices(cns: Consul, node_name: str) -> List[Device]:
    node_fid = node_name2fid(cns, node_name)
    device_list = []
    # Get entries from KV for "m0conf/nodes/<node_id>/processes/
    #           <process_fidk>/services/<svc_fid>/sdevs/<sdev_fid>"
    # We are getting lists of all sdevs for given node
    for x in kv_item(cns, f'm0conf/nodes/{node_fid}/processes/', recurse=True):
        parts = x['Key'].split('/', 9)
        if len(parts) == 9:
            if parts[-2] == 'sdevs':
                device_list.append(Device(
                    name=json.loads(x['Value'])['path'],
                    status=json.loads(x['Value'])['state']))

    return device_list


@repeat_if_fails(max_retries=24)
def get_bytecount_status(cns: Consul) -> Dict[str, Any]:
    """
    This function will return a bytecount status in JSON format
    """
    result: Dict[str, Any] = {
        'bytecount': {x.type: x.num_bytes for x in bytecount(cns)}
    }
    return result


@repeat_if_fails(max_retries=24)
def get_cluster_status(cns: Consul, consul_util: ConsulUtil,
                       devices_requested: bool) -> Dict[str, Any]:
    result: Dict[str, Any] = {
        'bytecount': get_bytecount_status(cns).get('bytecount'),
        'pools': [x for x in sns_pools(cns)],
        'profiles': [{'fid': x.fid, 'name': x.name, 'pools': x.pools}
                     for x in profiles(cns)],
        'filesystem': get_fs_stats(cns),
        'nodes': [Node(name=h, svcs=processes(cns, consul_util, h))
                  for h in node_names(cns)]
    }

    if devices_requested:
        result['devices'] = [Devices(node_name=h, devs=devices(cns, h))
                             for h in node_names(cns)]

    return result


def parse_opts(argv):
    p = argparse.ArgumentParser(description='Show cluster status.',
                                usage='%(prog)s [OPTION]')
    p.add_argument('--json',
                   help='show output in JSON format',
                   action='store_true')
    p.add_argument("-d", "--devices",
                   help='include devices info',
                   action='store_true')
    p.add_argument("-b", "--bytecount",
                   help='show output of bytecount info in JSON',
                   action='store_true')
    return p.parse_args(argv)


def setup_logging():
    logging.basicConfig(level=logging.ERROR)


@repeat_if_fails(max_retries=24)
def show_text_status(cns: Consul, consul_util: ConsulUtil,
                     devices_requested: bool) -> None:
    # In-memory buffer required because an intermittent Consul exception can
    # happen right in the middle of printing something. It is good to postpone
    # the printing to stdout until the moment when those exceptions can't
    # appear anymore.
    with io.StringIO() as stream:
        # Raised exception will cross the 'with' border so that the stream
        # will be closed and its memory will be released.
        def echo(text):
            print(text, file=stream)

        counts = bytecount(cns)
        assert counts
        echo('Bytecount:')
        for x in counts:
            echo(f'    {x.type} : {x.num_bytes}')

        pools = sns_pools(cns)
        assert pools
        echo('Data pool{}:'.format('s' if len(pools) > 1 else ''))
        echo('    # fid name')
        for pool in pools:
            echo(f'    {pool.fid} {pool.name!r}')

        profs = profiles(cns)
        assert profs
        echo('Profile{}:'.format('s' if len(profs) > 1 else ''))
        echo('    # fid name: pool(s)')
        for prof in profs:
            assert prof.pools
            pools_repr = ' '.join(repr(x) for x in prof.pools)
            echo(f'    {prof.fid} {prof.name!r}: {pools_repr}')

        echo('Services:')
        for h in node_names(cns):
            echo(f'    {h} {leader_tag(cns, h)}')
            for p in processes(cns, consul_util, h):
                fid: str = f'{p.fid}'
                echo(f'    [{p.status}]  {p.name:<18}  {fid:<30}  {p.ep}')
        if devices_requested:
            echo('Devices:')
            for h in node_names(cns):
                echo(f'    {h}')
                for d in devices(cns, h):
                    echo(f'    [{d.status}]  {d.name}')
        print(stream.getvalue(), end='')  # flush


def main(argv=None):
    inject.configure(di_configuration)
    setup_logging()
    opts = parse_opts(argv)
    cns = Consul()
    if not cluster_online():
        print('Cluster is not running', file=sys.stderr)
        return 1

    cns_util: ConsulUtil = ConsulUtil()
    if opts.json:
        status = get_cluster_status(cns, cns_util, opts.devices)
        print(simplejson.dumps(status, indent=2, for_json=True))
    elif opts.bytecount:
        status = get_bytecount_status(cns)
        print(simplejson.dumps(status, indent=2, for_json=True))
    else:
        show_text_status(cns, cns_util, opts.devices)
    return 0


if __name__ == '__main__':
    try:
        sys.exit(main())
    except HAConsistencyException as err:
        sys.exit(f'Consul Error: {err}')
