#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

# :help: stop the cluster or local node

import logging
import argparse
from typing import Dict, List, Tuple

from consul import Consul
from hax.util import ConsulUtil, repeat_if_fails

import utils


def check_cluster():
    if not utils.consul_is_active_at('localhost'):
        if utils.pcs_consul_is_active_at('localhost'):
            exit("Cluster is run by Pacemaker, try `pcs cluster stop --all'")
        else:
            exit('Cluster is not running')


@repeat_if_fails()
def _get_processes_for_cluster() -> Tuple[Dict[str, List[utils.Process]], str]:
    cns = Consul()
    processes = utils.processes_by_consul_svc_name(cns)
    leader_node = utils.get_kv(cns, 'leader')
    return (processes, leader_node)


@repeat_if_fails()
def _get_processes_for_node() -> Dict[str, List[utils.Process]]:
    cns = Consul()
    cns_util = ConsulUtil(raw_client=cns)
    node = cns_util.get_local_nodename()
    processes = utils.processes_node(cns, node)
    return processes


@repeat_if_fails()
def erase_rc_leader() -> None:
    cns_util = ConsulUtil()
    # fake leader value must match r'^elect[0-9]+$'
    logging.info('Making sure that RC leader can be re-elected next time')
    cns_util.kv.kv_put('leader', 'elect2805')


def stop_all_with_consul(processes: Dict[str, List[utils.Process]],
                         leader_node: str):
    for svc in utils.shutdown_sequence:
        if svc in processes and svc == 'consul':
            # Consul process at the current node must stopped the last.
            # Reason: if something goes wrong and the user will want to
            # shutdown the cluster again, local Consul must be available.
            remote_procs = [
                proc for proc in processes[svc] if not proc.is_local
            ]
            utils.stop_parallel(remote_procs)
            local_procs = [proc for proc in processes[svc] if proc.is_local]
            utils.stop_parallel(local_procs)

    if leader_node and not utils.is_fake_leader_name(leader_node):
        logging.info(f'Shutting down RC Leader at {leader_node}... ')
        pkill: str = 'sudo pkill --exact -KILL consul &> /dev/null'
        utils.exec_custom(utils.ssh_prefix(leader_node) + pkill,
                          show_err=False)


def stop_process(processes: Dict[str, List[utils.Process]]):
    for svc in utils.shutdown_sequence:
        if svc not in processes:
            continue
        if svc != 'consul':
            utils.stop_parallel([proc for proc in processes[svc]])


def shutdown_cluster(skip_consul_stop: bool):
    check_cluster()
    (processes, leader_node) = _get_processes_for_cluster()
    stop_process(processes)

    erase_rc_leader()
    if not skip_consul_stop:
        stop_all_with_consul(processes, leader_node)


def node_shutdown():
    check_cluster()
    processes = _get_processes_for_node()
    stop_process(processes)


def main() -> None:

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose",
                        help="Increase output verbosity",
                        action="store_true")
    parser.add_argument("--skip-consul-stop",
                        help="Skip consul service stop",
                        action="store_true")
    parser.add_argument("--node",
                        help="Node shutdown",
                        action="store_true")

    args = parser.parse_args()
    # Levels of log messages are in following order(decreasing priority)
    # ERROR -> WARN -> INFO -> DEBUG
    # We have 'verbose' option available for user which will decide
    # if DEBUG messsages should be printed or not
    #
    # If user provides 'verbose' option then DEBUG messages will be
    # included otherwise messages with priority more than or
    # equal to 'Info' will only be included
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format='%(message)s')
    else:
        logging.basicConfig(level=logging.INFO, format='%(message)s')

    skip_consul_stop = bool(args.skip_consul_stop)

    if args.node:
        logging.debug('Performing node shutdown')
        node_shutdown()
        return

    shutdown_cluster(skip_consul_stop)


if __name__ == '__main__':
    main()
