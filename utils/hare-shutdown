#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

# help stop the cluster or local node

import getopt
import sys
import logging
import utils
from socket import gethostname
from consul import Consul
from hax.util import repeat_if_fails
from typing import Dict, List


def check_cluster():
    if not utils.consul_is_active_at('localhost'):
        if utils.pcs_consul_is_active_at('localhost'):
            exit("Cluster is run by Pacemaker, try `pcs cluster stop --all'")
        else:
            exit('Cluster is not running')


@repeat_if_fails()
def _get_processes_for_cluster():
    cns = Consul()
    processes = utils.processes_by_consul_svc_name(cns)
    leader_node = utils.get_kv(cns, 'leader')
    return (processes, leader_node)


@repeat_if_fails()
def _get_processes_for_node():
    cns = Consul()
    node = gethostname()
    processes = utils.processes_node(cns, node)
    return processes


def stop_process(processes: Dict[str, List[utils.Process]]):
    for svc in utils.shutdown_sequence:
        if svc in processes:
            utils.stop_parallel([proc for proc in processes[svc]])


def shutdown_cluster():
    check_cluster()
    (processes, leader_node) = _get_processes_for_cluster()
    stop_process(processes)

    if leader_node and not utils.is_fake_leader_name(leader_node):
        logging.info(f'Shutting down RC Leader at {leader_node}... ')
        pkill: str = 'sudo pkill --exact -KILL consul &> /dev/null'
        utils.exec_custom(utils.ssh_prefix(leader_node) + pkill)


def node_shutdown():
    check_cluster()
    processes = _get_processes_for_node()
    stop_process(processes)


def main() -> None:
    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "v",
                                   ["verbose", "node"])
    except getopt.GetoptError as err:
        sys.exit(err)

    logging.basicConfig(level=logging.INFO, format='%(message)s')

    for (opt, value) in opts:
        if opt in ['-v', '--verbose']:
            logging.basicConfig(level=logging.DEBUG, format='%(message)s')
        if opt in ['--node']:
            node_shutdown()
            return

    shutdown_cluster()


if __name__ == '__main__':
    main()
