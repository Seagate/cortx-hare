#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.

set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
# set -x

# Recovery Coordinator (RC) prototype.
#
# Implemented as a Consul watch handler over the Events Queue (EQ)
# in the persistent KV store.
#
# Takes JSON array of events from stdin and processes them one after another.
# Each event is deleted from the queue after processing.
#
# NOTE: depends on jq >= 1.6 - https://stedolan.github.io/jq
#
# Run it like this:
#
#   $ consul watch -type=keyprefix -prefix eq/ proto-rc
#

# Redirect all printouts to the log file with the timestamp prefix:
exec &>> /var/log/hare/consul-${0##*/}.log
exec &> >(stdbuf -oL gawk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0 }')

STOP=0
sig_handler() {
    echo 'Signal caught! Exiting...'
    STOP=1
}

check4signal() {
    if (( STOP == 1 )); then
        exit 1
    fi
}

# Users can use this function to set timeouts.
set_timeout() {
    local after=$1 # seconds
    local event=$2
    local tmo=$(date -d @$(($(date '+%s') + $after)) '+%Y%m%d%H%M.%S')
    local event_s=$(consul kv get timeout/$tmo 2>/dev/null || true)
    if [[ $event_s ]]; then
        event="$event_s,$event"
    fi
    consul kv put timeout/$tmo $event
}

# Process events:
sed 's/null//' | jq -r '.[] | "\(.Key) \(.Value | @base64d)"' | {
    trap sig_handler TERM
    while read EPOCH EVENT; do
        echo "$CONSUL_INDEX: Process $EPOCH $EVENT..."
        case $EVENT in
          'wake_RC')
            ;;
          tmo*)
            set_timeout 60 "tmo$CONSUL_INDEX"
            ;;
          *)
            sleep 10
            ;;
        esac
        consul kv delete $EPOCH
        check4signal
    done
}

scheduled_wake_pid() {
    grep 'TAG=wake_RC' /proc/*/environ 2>/dev/null | cut -d/ -f3
}

wake_rc() {
    consul kv put eq/0 wake_RC &>/dev/null
}

wake_me_after() {
    local after=$1 # secs
    kill $(scheduled_wake_pid) &>/dev/null || true
    ( TAG=wake_RC sleep $after_s && wake_rc ) &>/dev/null &
}

schedule_timeout() {
    local tmo=${1#*/} # [timeout/]YYYYmmddHHMM.SS
    unset IFS # otherwise tmo_f might be invalid
    # Convert 'YYYYmmddHHMM.SS' to 'YYYY-mm-dd HH:MM:SS'.
    local tmo_f=$(sed -r 's/(....)(..)(..)(..)(..)\.(..)/\1-\2-\3 \4:\5:\6/' \
                      <<< $tmo)
    local tmo_s=$(date -d "$tmo_f" '+%s')
    local now_s=$(date -d 'now' '+%s')
    local after_s=$((tmo_s - now_s))
    (( after_s > 0 )) || wake_rc
    wake_me_after $after_s
}

# Process timeouts (if any):
IFS=':'
consul kv get -recurse timeout | {
    trap sig_handler TERM
    while read TMO EVENT; do
        tmo=${TMO#*/}
        now=$(date +%Y%m%d%H%M.%S)
        if (( tmo > now )); then
            schedule_timeout $tmo
            exit 0
        fi
        IFS=','
        for ev in $EVENT; do
            consul kv put $(printf "eq/%09d\n" $(next-epoch)) $ev
        done
        IFS=':'
        consul kv delete $TMO
        check4signal
    done
}
