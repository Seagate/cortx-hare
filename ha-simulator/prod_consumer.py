import json
from cortx.utils.message_bus import (MessageProducer, MessageConsumer,
                                     MessageBusAdmin)


ACTION_EVENT_VERSION = "2.0"


class myEvent:
    '''Event class to simulate events generated by HA.'''

    def __init__(self, event_id, event_type, site_id, rack_id, cluster_id,
                 storageset_id, node_id, host_id, resource_type, timestamp,
                 resource_id, specific_info=None):
        """
        Init method.
        """
        self.version = ACTION_EVENT_VERSION
        self.event_type = event_type
        self.event_id = event_id
        self.resource_type = resource_type
        self.cluster_id = cluster_id
        self.site_id = site_id
        self.rack_id = rack_id
        self.storageset_id = storageset_id
        self.node_id = node_id
        self.resource_id = resource_id
        self.timestamp = timestamp
        self.event_specific_info = specific_info

        print(f'Created event={self}.')

    def __str__(self):
        return str(f'Event: resource type={self.resource_type}, '
                   f'pod name={self.node_id}, '
                   f'type={self.event_type}')

    def get_json_msg(self):

        return json.dumps({
            "version": self.version,
            "event_type": self.event_type,
            "event_id": self.event_id,
            "resource_type": self.resource_type,
            "cluster_id": self.cluster_id,
            "site_id": self.site_id,
            "rack_id": self.rack_id,
            "storageset_id": self.storageset_id,
            "node_id": self.node_id,
            "resource_id": self.resource_id,
            "timestamp": self.timestamp,
            "event_specific_info": self.event_specific_info
        })


class EventProducer:

    def __init__(self, msg_topic):
        self.topic = msg_topic
        admin = MessageBusAdmin("ha_admin")
        # Register the topic only once.
        try:
            admin.register_message_type([self.topic], 1)
            print(f'Message topic={self.topic} registered on Message Bus.')
        except Exception:
            print(f'Message topic={self.topic} is already registered!!')
        self.producer = MessageProducer(producer_id="system_health",
                                        message_type=self.topic,
                                        method="sync")
        print(f'Producer created for topic={self.topic}')

    def send_event(self, event):
        print('Sending event...')
        if isinstance(event, myEvent):
            event_to_send = event.get_json_msg()
        else:
            event_to_send = json.dumps(event)
        self.producer.send([event_to_send])
        print(f'Sent event={event} to message bus.')


class EventConsumer:

    def __init__(self, msg_topic):
        self.consumer = MessageConsumer(
            consumer_id='hare',
            consumer_group='test_consumer', message_types=[msg_topic],
            auto_ack=str(True), offset='earliest')
        print(f'Consumer created for reading topic={msg_topic}')

    def receive_events(self):
        while True:
            try:
                message = self.consumer.receive()
            except Exception:
                print('Subscribed topic not available.')
                break
            if message:
                data = self._parse(message)
                print(f'Received event={data}')
            else:
                print('No more events in the bus. Consumer exiting.')
                break

    @staticmethod
    def _parse(self, message):
        return json.loads(message.decode('utf-8'))


def main():
    # Topic name should be "same" for producer and consumer to write and
    # read events from same queue.
    # To use hare consumer, provide topic as specified in hare-code.
    message_topic = "ha_event_hare"

    producer = EventProducer(message_topic)
    # Test event.
    # producer.send_event('dummy')

    # node failure event
    event = myEvent("event_id", "failed", "1", "1", "1", "1",
                    "storage-node3", "storage-node3", "node",
                    "16215009572", "e0cc8319be24430d9c3b34035892a669",
                    {"namespace": "cortx"})
    producer.send_event(event)

    # node online event
    event = myEvent("event_id", "online", "1", "1", "1", "1",
                    "storage-node3", "storage-node3", "node",
                    "16215009572", "e0cc8319be24430d9c3b34035892a669",
                    {"namespace": "cortx"})
    producer.send_event(event)

    # Only used to check whether events are sent and received properly.
    EventConsumer(message_topic).receive_events()


if __name__ == '__main__':
    main()
